1. redux
=> action은 객체

2. dispatch
=> dispatch가 action을 실행
=> dispatch(함수(값))
-> dispatch안에 함수일경우 리팩토링 되어있는 경우

3. 불변성 유지
=> Reducer 새로운 state를 만들어줌
=> 새로운 state로 대체됨

4. 중복
=> 함수로 만들기
-> store.dispatch(함수(값))

5. redux-thunk(미들웨어)
=> 비동기일때 action을 함수로 사용
const thunkMiddleware = (store)=> (dispatch) => (action) => {
	if(typeof action === 'function'){// 비동기
		return action(store.dispatch, store.getState)
	}
	return dispatch(action)
}
=> action creator(액션크리에이터 - action의 반복을 줄여서 함수로 만든경우)와
비동기 action creator을 구분해야함
-> 예시 - action creator
const login = (data) => {
	return{
		type: "LOG_IN",
		data
	}
}
- 객체를 return

-> 예시 - 비동기 action creator
const loginRequest = () => {
	return (dispatch, getState) => {
		dispatch(actionCreator());
		setTimeout(()=>{
			dispatch(logInSuccess());
		}, 2000)
	}
}
- 함수를 return
- actionCreator(), logInSuccess() - 동기작업
