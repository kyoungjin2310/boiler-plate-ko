1. generator 함수 예시
function* generatorFunction() {
    console.log('안녕하세요?');
    yield 1;
    console.log('제너레이터 함수');
    yield 2;
    console.log('function*');
    yield 3;
    return 4;
}

const generator = generatorFunction();
-> 함수를 호출한다고 해서 해당 함수 안의 코드가 바로 시작되지는 않음
-> generator.next() 를 호출해야만 코드가 실행되며, yield를 한 값을 반환하고 코드의 흐름흐름을 멈춤
-> 코드의 흐름이 멈추고 나서 generator.next() 를 다시 호출하면 흐름이 이어서 다시 시작
-> generator 호출하면 멈춰있음
-> generator.next() 한번할 경우 {value:1, done:false}
-> generator.next() 두번할 경우 {value:2, done:false}
-> done:false -> 끝의 값이면 true 됨
-> generator -> closed 상태가됨

2. generator 함수 예시2
function* sumGenerator() {
    console.log('sumGenerator이 시작됐습니다.');
    let a = yield;
    console.log('a값을 받았습니다.');
    let b = yield;
    console.log('b값을 받았습니다.');
    yield a + b;
}
-> generator 호출하면 멈춰있음
-> generator.next() 한번할 경우 sumGenerator이 시작됐습니다.
-> generator.next(2) 두번할 경우 a값을 받았습니다.
-> generator.next(5) 세번할 경우 b값을 받았습니다.
-> generator.next() 네번할 경우 {value:7, done:true}

3. generator 함수 예시3
function* inifiniteAddGenerator() {
	let result = 0;
	while(true){
		result += yield result;
	}
}
-> 끝나지 않는 함수
-> result += result 값이 계속 나옴
